mutation AckCLISessionEventMutation($nfToken: String!, $sessionId: String!, $eventIds: [String!]!) @netlify(id: """12b5bdea-9bab-4124-a731-5e697b155010""", doc: """Acknowledge CLI events that have been processed and delete them from the upstream queue""") {
  oneGraph(auths: {netlifyAuth: {oauthToken: $nfToken}}) {
    ackNetlifyCliEvents(input: {eventIds: $eventIds, sessionId: $sessionId}) {
      events {
        id
      }
    }
  }
}

query AppSchemaQuery($nfToken: String!, $appId: String!) @netlify(id: """12b5bdea-9bab-4124-a731-5e697b155011""", doc: """Fetch the schema metadata for a site (enabled services, id, etc.)""") {
  oneGraph(auths: {netlifyAuth: {oauthToken: $nfToken}}) {
    app(id: $appId) {
      graphQLSchema {
        appId
        createdAt
        id
        services {
          friendlyServiceName
          logoUrl
          service
          slug
          supportsCustomRedirectUri
          supportsCustomServiceAuth
          supportsOauthLogin
        }
        updatedAt
      }
    }
  }
}

query CLISessionQuery($nfToken: String!, $sessionId: String!, $first: Int!) @netlify(id: """12b5bdea-9bab-4124-a731-5e697b155009""", doc: """Fetch a single CLI session by its id""") {
  oneGraph(auths: {netlifyAuth: {oauthToken: $nfToken}}) {
    __typename
    netlifyCliSession(id: $sessionId) {
      appId
      createdAt
      id
      cliHeartbeatIntervalMs
      events(first: $first) {
        __typename
        createdAt
        id
        sessionId
        ... on OneGraphNetlifyCliSessionLogEvent {
          id
          message
          sessionId
          createdAt
        }
        ... on OneGraphNetlifyCliSessionTestEvent {
          id
          createdAt
          payload
          sessionId
        }
      }
      lastEventAt
      metadata
      name
      netlifyUserId
    }
  }
}

mutation CreateApiTokenMutation($input: OneGraphCreateApiTokenTokenInput!, $nfToken: String!) @netlify(id: """12b5bdea-9bab-4122-a991-5e697b155004""", doc: """Create a token belonging to a specific siteId to persist operations and create GraphQL schemas later""") {
  oneGraph(auths: {netlifyAuth: {oauthToken: $nfToken}}) {
    createApiToken(input: $input) {
      accessToken {
        token
        userAuths {
          service
          foreignUserId
          scopes
        }
        appId
        expireDate
        name
        netlifyId
        anchor
      }
    }
  }
}

mutation CreateCLISessionEventMutation($nfToken: String!, $sessionId: String!, $payload: JSON!) @netlify(id: """12b5bdea-9bab-4124-a731-5e697b155008""", doc: """Create a new event for a CLI session to consume""") {
  oneGraph(auths: {netlifyAuth: {oauthToken: $nfToken}}) {
    createNetlifyCliTestEvent(
      input: {data: {payload: $payload}, sessionId: $sessionId}
    ) {
      event {
        id
        createdAt
        sessionId
      }
    }
  }
}

mutation CreateCLISessionMutation($nfToken: String!, $appId: String!, $name: String!, $metadata: JSON) @netlify(id: """12b5bdea-9bab-4124-a731-5e697b155006""", doc: """Register a new CLI session with OneGraph""") {
  oneGraph(auths: {netlifyAuth: {oauthToken: $nfToken}}) {
    createNetlifyCliSession(
      input: {appId: $appId, name: $name, metadata: $metadata}
    ) {
      session {
        id
        appId
        netlifyUserId
        name
        cliHeartbeatIntervalMs
      }
    }
  }
}

mutation CreateGraphQLSchemaMutation($input: OneGraphCreateGraphQLSchemaInput!) @netlify(id: """12b5bd78-9222-4124-a731-5e697b155001""", doc: """Create a GraphQL Schema by specifying its inputs (services, external GraphQL schemas, etc.)""") {
  oneGraph {
    createGraphQLSchema(input: $input) {
      graphQLSchema {
        id
        externalGraphQLSchemas {
          nodes {
            id
            endpoint
            service
            createdAt
            updatedAt
          }
        }
        parentGraphQLSchemaId
        salesforceSchema {
          id
          createdAt
          updatedAt
        }
        services {
          slug
        }
        updatedAt
        createdAt
        appId
      }
    }
  }
}

mutation CreateNewSchemaMutation($nfToken: String!, $input: OneGraphCreateGraphQLSchemaInput!) @netlify(id: """12b5bdea-9bab-4124-a731-5e697b155013""", doc: """Create a new schema in OneGraph for the given site with the specified metadata (enabled services, etc.)""") {
  oneGraph(auths: {netlifyAuth: {oauthToken: $nfToken}}) {
    createGraphQLSchema(input: $input) {
      app {
        graphQLSchema {
          id
        }
      }
      graphqlSchema {
        id
        services {
          friendlyServiceName
          logoUrl
          service
          slug
          supportsCustomRedirectUri
          supportsCustomServiceAuth
          supportsOauthLogin
        }
      }
    }
  }
}

mutation CreatePersistedQueryMutation($nfToken: String!, $cacheStrategy: OneGraphPersistedQueryCacheStrategyArg, $allowedOperationNames: [String!]!, $fallbackOnError: Boolean!, $freeVariables: [String!]!, $query: String!, $tags: [String!]!, $description: String, $appId: String!) @netlify(id: """12b5bdea-9bab-4124-a731-5e697b155001""", doc: """Create a persisted operations doc to be later retrieved, usually from a GUI""") {
  oneGraph(auths: {netlifyAuth: {oauthToken: $nfToken}}) {
    createPersistedQuery(
      input: {query: $query, appId: $appId, cacheStrategy: $cacheStrategy, allowedOperationNames: $allowedOperationNames, fallbackOnError: $fallbackOnError, freeVariables: $freeVariables, tags: $tags, description: $description}
    ) {
      persistedQuery {
        id
        allowedOperationNames
        description
        fixedVariables
        freeVariables
        query
        tags
      }
    }
  }
}

mutation CreateSharedDocumentMutation($nfToken: String!, $input: OneGraphCreateSharedDocumentInput!) @netlify(id: """12b5fdea-9ccd-4124-a731-5e697b155015""", doc: """Create a document with a shared operation for others to import and use""") {
  oneGraph(auths: {netlifyAuth: {oauthToken: $nfToken}}) {
    createSharedDocument(input: $input) {
      sharedDocument {
        id
        moderationStatus
        operationName
        services {
          friendlyServiceName
        }
        description
      }
    }
  }
}

query ListNetlifyEnabledServicesQuery($logoStyle: OneGraphAppLogoStyleEnum = ROUNDED_RECTANGLE, $betaServices: [OneGraphServiceEnumArg!] = []) @netlify(id: """a6969eb4-5e17-43fb-a325-11566f7d1db3""", doc: """Retrieve a list of _all_ supported services from OneGraph""", executionStrategy: PERSISTED) @netlifyCacheControl(enabled: true, cacheStrategy: {timeToLiveSeconds: 300}, fallbackOnError: true) {
  oneGraph {
    services(
      filter: {or: [{service: {in: $betaServices}}, {supportsNetlifyGraph: true}, {supportsNetlifyApiAuthentication: true}]}
    ) {
      friendlyServiceName
      logoUrl(style: $logoStyle)
      service
      slug
      supportsCustomRedirectUri
      supportsCustomServiceAuth
      supportsOauthLogin
      netlifyGraphEnabled
      netlifyApiAuthenticationEnabled
    }
  }
}

query ListPersistedQueries($appId: String!, $first: Int!, $after: String, $tags: [String!]!) @netlify(id: """12b5bdea-9bab-4124-a731-5e697b155002""", doc: """Fetch a paginated list of persisted queries belonging to an app""") {
  oneGraph {
    app(id: $appId) {
      id
      persistedQueries(first: $first, after: $after, tags: $tags) {
        pageInfo {
          hasNextPage
          endCursor
        }
        nodes {
          id
          query
          fixedVariables
          freeVariables
          allowedOperationNames
          tags
          description
        }
      }
    }
  }
}

query ListSharedDocumentsQuery($nfToken: String!, $first: Int = 10, $status: OneGraphSharedDocumentModerationStatusEnum, $services: [OneGraphServiceEnumArg!]!, $style: OneGraphAppLogoStyleEnum = ROUNDED_RECTANGLE) @netlify(id: """12b5fdea-9ccd-1253-a731-5e697b155015""", doc: """List shared documents given a set of filters""") {
  oneGraph(auths: {netlifyAuth: {oauthToken: $nfToken}}) {
    sharedDocuments(
      first: $first
      filter: {moderationStatus: {equalTo: $status}, services: {in: $services}}
    ) {
      nodes {
        description
        body
        createdAt
        id
        moderationStatus
        operationName
        siteId
        updatedAt
        services {
          friendlyServiceName
          logoUrl(style: $style)
          service
          slug
        }
      }
    }
  }
}

mutation MarkCLISessionActiveHeartbeat($nfToken: String!, $id: String!) @netlify(id: """12b5bdea-9bab-4124-a731-5e697b155014""", doc: """Mark a CLI session as active and update the session's heartbeat""") {
  oneGraph(auths: {netlifyAuth: {oauthToken: $nfToken}}) {
    updateNetlifyCliSession(input: {status: ACTIVE, id: $id}) {
      session {
        id
        status
        createdAt
        updatedAt
        cliHeartbeatIntervalMs
      }
    }
  }
}

mutation MarkCLISessionInactive($nfToken: String!, $id: String!) @netlify(id: """12b5bdea-9bab-4124-a731-5e697b155015""", doc: """Mark a CLI session as inactive""") {
  oneGraph(auths: {netlifyAuth: {oauthToken: $nfToken}}) {
    updateNetlifyCliSession(input: {status: INACTIVE, id: $id}) {
      session {
        id
        status
        createdAt
        updatedAt
        cliHeartbeatIntervalMs
      }
    }
  }
}

query PersistedQueryQuery($nfToken: String!, $appId: String!, $id: String!) @netlify(id: """12b5bdea-9bab-4124-a731-5e697b155005""", doc: """Fetch a persisted doc belonging to appId by its id""") {
  oneGraph(auths: {netlifyAuth: {oauthToken: $nfToken}}) {
    persistedQuery(appId: $appId, id: $id) {
      id
      query
      allowedOperationNames
      description
      freeVariables
      fixedVariables
      tags
    }
  }
}

query SharedDocumentQuery($nfToken: String!, $id: String!, $logoStyle: OneGraphAppLogoStyleEnum = ROUNDED_RECTANGLE) @netlify(id: """a2b5fdea-9ccd-4124-a731-5e697b155001""", doc: """Find a shared document given its id""") {
  oneGraph(auths: {netlifyAuth: {oauthToken: $nfToken}}) {
    sharedDocument(id: $id) {
      body
      createdAt
      description
      id
      moderationStatus
      operationName
      updatedAt
      services {
        logoUrl(style: $logoStyle)
        friendlyServiceName
        service
        slug
      }
    }
  }
}

mutation UpdateCLISessionMetadataMutation($nfToken: String!, $sessionId: String!, $metadata: JSON!) @netlify(id: """12b5bdea-9bab-4124-a731-5e697b155007""", doc: """Update the CLI session with new metadata (e.g. the latest docId) by its id""") {
  oneGraph(auths: {netlifyAuth: {oauthToken: $nfToken}}) {
    updateNetlifyCliSession(input: {id: $sessionId, metadata: $metadata}) {
      session {
        id
        name
        metadata
        cliHeartbeatIntervalMs
      }
    }
  }
}

mutation UpsertAppForSiteMutation($nfToken: String!, $siteId: String!) @netlify(id: """12b5bdea-9bab-4124-a731-5e697b155012""", doc: """If a site does not exists upstream in OneGraph for the given site, create it""") {
  oneGraph(auths: {netlifyAuth: {oauthToken: $nfToken}}) {
    upsertAppForNetlifySite(input: {netlifySiteId: $siteId}) {
      org {
        id
        name
      }
      app {
        id
        name
        corsOrigins
        customCorsOrigins {
          friendlyServiceName
          displayName
          encodedValue
        }
      }
    }
  }
}
